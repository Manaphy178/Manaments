<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
    	http://www.springframework.org/schema/tx
        https://www.springframework.org/schema/tx/spring-tx.xsd
    	http://www.springframework.org/schema/mvc
        https://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd">


	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName"
			value="com.mysql.jdbc.Driver" />
		<property name="url"
			value="jdbc:mysql://localhost/bd_tienda_instrumentos_hibernate2" />
		<property name="username" value="root" />
		<property name="password" value="" />
	</bean>

	<!-- vamos a configurar hibernate -->
	<!-- usar hibernate basicamente es utilizar continuamente un objeto de tipo 
		SessionFactory de hibernate -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan" value="modelo" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">
					org.hibernate.dialect.MySQL5InnoDBDialect
				</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">create</prop>
					<!-- cambiar update a create si no crea 
				todas las tablas, una vez creadas volver 
				a cambiar a update -->
			</props>
		</property>
	</bean>

	<!-- vamos a configurar la parte de transacciones en hibernate, las clases 
		que tengan @Transactional cuando en sus metodos hagan más de una operacion 
		con base de datos, queremos que si una operacion falla las demás no se realizen -->
	<tx:annotation-driven
		transaction-manager="transactionManager" />
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>


</beans>